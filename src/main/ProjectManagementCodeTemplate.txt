HOW TO BUILD THE APP:

INFO:


	ALLOCATED HOURS = BUSINESS HOURS
	EF = EXTRA FUNCTION
	OTM = ONE TO MANY
	BL = BUSINESS LOGIC
	MTO = MANY TO ONE
	OTO = ONE TO ONE
	MTM = MANY TO MANY
	$$ = Database Entity / Table
	## = Package
	RLS = Relationship (DB Relationship)
	
	
STUFF TO IMPLEMENT MAYBE?:


	- CONTROLLERADVICE for EXCEPTION HANDLING
	- CACHE
	- DELETE functions needs to delete entities as well ... CascadeType? Look on WishCloud.
		They might need to find ID as well first, put into object and delete?
	- TEST CLASSES
		
		
CASES:


	1. Etablere datamodel for projekt- og tidsdimensioner (projekter, delprojekter, opgaver, tidsforbrug, deadlines mv
		
	2. Lave en brugergrænseflade til oprettelse og vedligeholdelse af et projekt:	
		
	3. Summering af tidsforbrug, så man kan få overblik over tidsforbrug på projekter og delprojekter mv:

	4. Fordeling af tidsforbrug på arbejdsdage, så man ved hvor mange timer der skal arbejdes hver dag for at projektet 
	bliver færdigt til tiden?:

	5. Introducere kompetencer/ressourcetyper og give overblik over hvor mange timer hver kompetencer/ressourcetype 
	bruger hver dag:

	6. Introducere konkrete ressourcer (med nogle bestemte kompetencer) og finde ud af hvor hårdt belastet hver 
	ressource er på hver arbejdsdag	
		
		
STRUCTURE:
		
		SECURITY - Already added
	
		## Entities(Models):
			
			ROLES: (RLS: *USER*)
			
				1. PROJECT OWNER
				2. PROJECT MANAGER
				3. TEAM MEMBER
			
			
			$$ USER: (RLS: *PERSON*)
			
				Role role;
				String Username; (MAYBE AUTOGENERATED?)
				String Password;
				Person personId; (OTO)
			
			
			$$ PROJECTS (RLS: *TEAM*, *PERSON*, *HOURS*, *EFFORT*, *SUB PROJECT*)
			
				Long id;
				String projectName;
				Date startDate;
				Date endDate;
				String description;
				int allocatedHours; (TAKE DATE FROM DEADLINE AND SUBTRACT = ALLOCATED HOURS) (IS GONNA SOLVE CASE 4, (ALLOCATED HOURS / 24) / WEEKS * 5 * 7,5 = XX)
				int totalTimeSpent (BL: CALCULATE FROM SUBPROJECT)
				Person person; (Project manager) (EF) (OTO)
				List<Team> teams; (OTM)
				List<Effort> efforts; (OTM)
				List<Hours> hours; (OTM)
				List<SubProject> subProjects; (OTM)
					
				$$ TEAM (RLS: *PROJECT*)
						
					Long id;
					String name;
					Project project; (MTO)
	
			
				$$ SUBPROJECT (RLS: *PROJECT*, *TASK*):
				
					Long id;
					String name;
					Date startDate;
					Date endDate;
					boolean completed;
					int allocatedHours;
					int timeSpent; (BL: CALCULATE FROM TASKS)
					Project projectId; (MTO)
					Person person; (Subproject manager) (EF) (OTO)
					List<Task> tasks; (OTM)
					
					
						$$ TASK (RLS: *SUB PROJECT*):
						
							Long id;
							Subproject subproject_id; (MTO)
							boolean isCompleted;
							String name;
							SubTask subTaskId; (OTM)
							String description;
							int timeSpent(BL: CALCULATE FROM SUBTASKS)
							Date startDate;
							Date endDate;
						
						
								$$ SUBTASKS (RLS: *TASKS*)
								
									Long id;
									Task taskId; (OTM)
									boolean isCompleted;
									String name;
									String description;
									int timeSpent;
									Date startDate;
									Date endDate;
										
										
			$$ PERSON(EF) (RLS: *TEAM* + *DEPARTMENT* + *HOURS*, *PROJECT*, *SUBPROJECT*, *USER*):
			
				Long id;
				User user; (OTO)
				String name;
				String lastName;
				Set<Department> departments; (MTM)
				Set<Hours> hours; (MTM)
				Set<Team> teams; (MTM)
				Project project; (OTO)
				SubProject subProject; (OTO)

				
					$$ DEPARTMENT: (RLS: *PERSON*)
					
						Long id;
						String name;
						String competence;
								
					
					$$ HOURS: (RLS: *PROJECT*, *PERSON*)
						
						Long id;
						Project project; (MTO)
						int hours;
						
			
			$$ EFFORT/RESOURCE_SPENT: (RLS: *PROJECT*):
			
				Long id;
				Project Project; (MTO)
					{ 
					(BL: PULL PERSON HOURS AND CALCULATE, CAN ALSO USE THIS IN CASE 5+6)
					int analysisHours;
					int designHours;
					int codingHours;
					int testingHours;
					int projectManagementHours;
					}
				Date date; (DATE LOGGED)
		
		## Service:
			
			NOTES:
			Entity ID's in delete methods might need to be whole entity objects instead, same for save methods.
			Most service classes should have findByXX and findAll methods.
			Interface for services used in other services, eg person for example.
		
			- ProjectService
					
					Methods:
						- public Project findByProjectId(long projectId);
						- public List<Project> findAll();
						- public Project save(Project project);
						- public void delete(Project project);
						- public int calculateAllocatedHours(Date startDate);
						- public int calculateTimeSpent(int subprojectTimeSpent);
						
						
			- TeamService
				
					Methods:
						- public Team findById(long teamId);
						- public Team save(Team team);
						- public void deleteTeam(Team team);
						
						
			- SubprojectService
					
					Methods:
						- public List<Subproject> findAllForProjectId(long projectId);
						- public SubProject save(SubProject subproject);
						- public void updateHours(SubProject subproject);
						- public void complete(SubProject subproject);
						- public void delete(SubProject subproject);
						- public int calculateTimeSpent(int taskTimeSpent)
						
						
			- TaskService
				- Includes SUBTASKS
					
					Methods:
						- public List<Tasks> getAllTasksForSubprojectId(long subprojectId)
						- public Task save(Task task);
						- public void delete(Task task);
						- public void complete(Task task);
						- public int calculateTimeSpent(maybe hours from person??)
						
						- public List<Subtasks> getAllSubTasksForTaskId(long taskId)
						- public SubTask saveSubtask(SubTask subtask, long taskId);
						- public void deleteSubtask(SubTask subtask, long taskId);
						- public void completeSubtask(SubTask subtask, long taskId);
							- taskId is maybe the whole object here...
					
					
			- EffortService
					
					Methods:
						- public Effort save(Effort effort, long projectId);
						- public void delete(Effort effort, long projectId);
						- public void update(Effort effort, long projectId);
						- public void calculateHours(long personId);
						- public void calculateTotal();
						
						Maybe calculate efforts again and again if you add a new one etc? use 
					
					
			- DepartmentsService
				- Includes DEPARTMENT;
						
					Methods:
					    - public Department findById(long id);
						- public Department save(Department departments)
						- public void delete(Department departments)
			
			- HoursService
					
					Methods:
						- public Hours save(Hours hours, long projectId, long personId)
						- public void calculateTotalHours() // maybe??
						- public void deleteHours(Hours hours, long projectId, long personId)
						- public void updateHours(Hours hours, long projectId, long personId)
						
						
			- PersonService (MAYBE INTERFACE)
			
					Methods:
						- public Person save(Person person)
						- public void findAllByDepartmentId(long departmentId)
						- public void delete(Person person)
						
						no need for anything other than findBy if Persons are hardcoded.
			
			- UserService
			
				- Add methods for getting username and role for current logged in user
		
		## Controller:
		
			- ProjectController
				
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						@GetMapping showTimeSpent
						
						ALSO METHODS FOR BL
					
			- SubprojectController
					
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
					
			- TaskController
				- Includes SUBTASKS
					
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
			
			- TeamsController
				- Includes TEAM
				
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
					
			- EffortController
					
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
					
			- DepartmentsController
				- Includes DEPARTMENT;
				
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
			
			- HoursController
					
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
					
			- PersonController
					
					Methods:
						@GetMapping list
						@GetMapping addXXX
						@PostMapping add
						@GetMapping update
						@GetMapping delete
						
						ALSO METHODS FOR BL
		
		
		## Repository:
			
			ALL REPOSITORIES SHOULD HAVE findByXX METHODS!
			
			- ProjectRepository
			
			- SubprojectRepository
			
			- TaskRepository
			
			- TeamRepository
			
			- SubtaskRepository
			
			- EffortRepository
			
			- DepartmentRepository
			
			- HoursRepository
			
			- PersonRepository
						

		HTML:
			
			- Login
			- dashboard.html
				- add-buttons
				- delete-buttons
			
			- fragments:
				navbar
				list-team
				list-teams
				list-projects
				list-subprojects
				list-list
				add-hours
				add-
				footer
				update-project
				update-subproject
				update-hours
				add-project
				add-subproject
				add-task
				add-subtask
				add-team
				add-teams
				add-effort
				update-effort
				

			- Whenever you want to add something, eg. a person to a team, project etc. use a dropdown where you can select
				- RESTRICT FOR PROJECT OWNERS ETC VIA THYMELEAF AND SPRING SECURITY
			- IF YOU LOGIN AS A TEAM MEMBER, you can only see the projects you are in. 
			- GO BACK BUTTONS, CANCEL BUTTONS -- HIGH PRIORITY
			- Popups for adding stuff???
			- limiters eg. show 5 entries, pagination for memberlist, tasks etc. 
			- maybe limit tasks, subprojects etc to corresponding roles?
			
			Design:
			
				- Look at sketches
			
			
		JS:
		
			- GoToTopButton
			- NavBar for projects
			- Maybe for timeSpent graph
			
SQL SCRIPT:

INSERT INTO `users` (`user_id`, `user_name`, `password`, `active`) VALUES (1, 'alex', '$2a$10$EZ1TVvvwsiHGnjXtmeMOQuJFlUXpxI4kjOGdOPhLD6o9kAzWqh38y', 1);
INSERT INTO `users` (`user_id`, `user_name`, `password`, `active`) VALUES (2, 'mathias', '$2a$10$EZ1TVvvwsiHGnjXtmeMOQuJFlUXpxI4kjOGdOPhLD6o9kAzWqh38y', 1);
INSERT INTO `users` (`user_id`, `user_name`, `password`, `active`) VALUES (3, 'admin', '$2a$10$EZ1TVvvwsiHGnjXtmeMOQuJFlUXpxI4kjOGdOPhLD6o9kAzWqh38y', 1);
INSERT INTO `users` (`user_id`, `user_name`, `password`, `active`) VALUES (4, 'user', '$2a$10$EZ1TVvvwsiHGnjXtmeMOQuJFlUXpxI4kjOGdOPhLD6o9kAzWqh38y', 1);
INSERT INTO `users` (`user_id`, `user_name`, `password`, `active`) VALUES (5, 'temp', '$2a$10$EZ1TVvvwsiHGnjXtmeMOQuJFlUXpxI4kjOGdOPhLD6o9kAzWqh38y', 1);
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (1, 1); -- User "alex" has role PROJECT OWNER, PROJECT MANAGER, TEAM MEMBER
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (1, 2);
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (1, 3);
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (2, 1); -- User "mathias" has role PROJECT OWNER, PROJECT MANAGER, TEAM MEMBER
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (2, 2);
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (2, 3);
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (3, 1); -- User "admin" has role PROJECT OWNER
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (4, 2); -- User "user" has role PROJECT MANAGER
INSERT INTO `user_role` (`user_id`, `role_id`) VALUES (5, 3); -- User "temp" has role TEAM MEMBER			
	